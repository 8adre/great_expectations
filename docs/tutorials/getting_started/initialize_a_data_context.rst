.. _tutorials__getting_started__initialize_a_data_context:

Initialize a Data Context
===============================================

In Great Expectations, your :ref:`Data Context` manages your project configuration. In this tutorial, we will show you how to initialize a Data Context in a file system using the Great Expectations command line interface (CLI). In some cases, you might want to initialize a Data Context purely in code. This is not covered in the tutorial, but please see :ref:`the how-to guide on configuring a Data Context without a yml file <how_to_guides__configuring_data_contexts__how_to_instantiate_a_data_context_without_a_yml_file>` for instructions.


Install Great Expectations
-----------------------------------------------

If you haven't already, install Great Expectations.

We recommend deploying within a virtual environment. If you're not familiar with virtual environments, pip, jupyter notebooks,
or git, you may want to check out the :ref:`supporting_resources` section before continuing.

.. raw:: html

   The command to install is especially great <a href="https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/pip_install_great_expectations.png" target="_blank">if you're a Dickens fan</a>:
   <br/>
   <br/>

If you intend to contribute to Great Expectations and want to install from a git branch or a fork, check out :ref:`contributing_setting_up_your_dev_environment` in the contributor documentation.

About the example data
---------------------

For this tutorial, we will use a simplified version of the ... (TODO, describe taxi data)

Run ``great_expectations init``
-----------------------------------------------

When you installed Great Expectations, you also installed the Great Expectations :ref:`command line interface (CLI) <command_line>`. It provides helpful utilities for deploying and configuring DataContexts, plus a few other convenience methods.

To initialize your Great Expectations Data Context for the project, run this command in the terminal from the ``ge_tutorial/`` directory.

.. code-block:: bash

    great_expectations init


You should see this:

.. code-block::

      ___              _     ___                  _        _   _
     / __|_ _ ___ __ _| |_  | __|_ ___ __  ___ __| |_ __ _| |_(_)___ _ _  ___
    | (_ | '_/ -_) _` |  _| | _|\ \ / '_ \/ -_) _|  _/ _` |  _| / _ \ ' \(_-<
     \___|_| \___\__,_|\__| |___/_\_\ .__/\___\__|\__\__,_|\__|_\___/_||_/__/
                                    |_|
                 ~ Always know what to expect from your data ~

    Let's configure a new Data Context.

    First, Great Expectations will create a new directory:

        great_expectations
        |-- great_expectations.yml
        |-- expectations
        |-- checkpoints
        |-- notebooks
        |-- plugins
        |-- .gitignore
        |-- uncommitted
            |-- config_variables.yml
            |-- documentation
            |-- validations

    OK to proceed? [Y/n]: 

Let's pause there for a moment.

As you can see, the ``init`` command creates a subdirectory called ``great_expectations/`` within your ``ge_tutorial/` directory. This directory will contain all of the important components of a Great Expectations deployment:


* ``great_expectations.yml`` will contain the main configuration your deployment.
* The ``expectations/`` directory will store all your :ref:`Expectations` as JSON files. If you want to store them somewhere else, you can change that later.
* The ``notebooks/`` directory is for helper notebooks to interact with Great Expectations.
* The ``plugins/`` directory will hold code for any custom plugins you develop as part of your deployment.
* The ``uncommitted/`` directory contains files that shouldn't live in version control. It has a ``.gitignore`` configured to exclude all its contents from version control. The main contents of the directory are:

  * ``uncommitted/config_variables.yml``, which will hold sensitive information, such as database credentials and other secrets.
  * ``uncommitted/documentation``, which will contains :ref:`Data Docs` generated from Expectations, Validation Results, and other metadata.
  * ``uncommitted/validations``, which will hold :ref:`Validation Results` generated by Great Expectations.

Back in your terminal, go ahead and hit ``Enter`` to proceed to the next step to set up a Datasource.
